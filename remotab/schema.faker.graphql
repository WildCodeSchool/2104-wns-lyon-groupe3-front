type Address {
  id: ID
	street: String @fake(type: streetName)
  postalCode: String @fake(type: zipCode)
  town: String @fake(type: city)
}

type User {
  id: ID
  firstNameProf: String @fake(type: firstName)
  lastNameProf: String @fake(type: lastName)
  titreProf: String @fake(type: jobTitle)
  emailAddress: String @fake(type: email)
  photoProfil: String @fake(type: avatarUrl)
  Address:  Address 
  phoneNumberProf: String @fake(type: phoneNumber, locale: fr)
  
}


{
  allUsers {
    id
    firstNameProf
    lastNameProf
    titreProf
    photoProfil
    emailAddress
    phoneNumberProf
    Address {
      street
      postalCode
      town
    }
  }
}

input InputAddress {
  street: String!
  postalCode: String!
  town: String!
}

input InputUser {
  firstNameProf: String!
  lastNameProf: String!
  titreProf: String!
  emailAddress: String!
  photoProfil: String!
  Address: InputAddress!
  phoneNumberProf: String!
}

type Mutation {
  createUser(inputUser: InputUser): User
  removeUser(id: String): User
  updateUserInfo(id: String): User
}

type Query {
  allUsers: [User] @listLength(min:2, max:10)
}

